#include "ec.h"

#ifndef EC_ECS3_H
#define EC_ECS3_H
	
extern int ecs_entity_id;
extern int n_entity;
extern int n_component;

extern int ecs_max;
extern int ecs_active;

extern int **entity_component_array;

typedef struct ECEntity {
	int id;
	int *live;
} ECEntity; 					


#define EC_Entity3(entity_type, entity, n_entities) 				\
	ECEntity entity; 							\
	entity.id = ecs_entity_id++;

void
EC_Create_Entity_Component_Array (int n_entity, int n_component);


#define ECS_Get(entity, component) 						\
	entity_component_array[entity][component]


#define Create_Component(type, component) 					\
	typedef struct EC_CONCAT(type, Component) {				\
		int id; 							\
		type *array; 							\
		type *list; 							\
	} EC_CONCAT(type, Component); 						\
										\
	EC_CONCAT(type, Component) component;


#define Set_Component(type, component, n_components) 				\
	component.id = ecs_component_id++; 					\
	component.arry = (type *) realloc (sizeof(type) * n_components); 	\
	component.live = (bool *) realloc (sizeof(bool) * n_components); 



#endif // EC_ECS3_H
